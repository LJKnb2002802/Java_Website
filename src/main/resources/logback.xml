<?xml version="1.0" encoding="UTF-8"?>
<!--
级别从高到低 OFF 、 FATAL 、 error 、 warn 、 info 、 debug 、 trace 、 ALL
日志输出规则 根据当前设置的 ROOT 级别，日志输出时，级别高于root默认的级别时 会输出。
具体地说，info 级别将输出 info、warn 和 error 级别的日志，而 warn 级别将输出 warn 和 error 级别的日志。
-->

<!-- filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志文件 输出位置 -->
    <property name="log_dir" value="./logs"/>
    <!--
      日志保留天数 30天，控制保留的归档文件的最大数量，超出数量就删除旧文件
      假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。
      注意，删除旧文件时，那些为了归档而创建的目录也会被删除
     -->
    <property name="maxHistory" value="30"/>
    <!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1-->
    <property name="maxSize" value="300MB"/>
    <!--所有的日志文件最大10G，超过就会删除旧的日志-->
    <property name="totalMaxSize" value="10GB"/>


    <!-- 日志格式：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度，%msg：日志消息，%n是换行符-->
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n"/>

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- error级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- true日志会被追加到文件结尾，false清空原文件，默认为true -->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 设置日志文件大小，超过指定大小，就生成新的日志文件 -->
            <maxFileSize>${maxSize}</maxFileSize>
        </triggeringPolicy>
        <!--
            日志文件的级别：如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。
            onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL
            onMatch="ACCEPT" 表示匹配该级别及以上
            onMatch="DENY" 表示不匹配该级别及以上
            onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配该级别以下
            onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配该级别以下的
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalMaxSize}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- warn级别日志 appender -->
    <appender name="warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- true日志会被追加到文件结尾，false清空原文件，默认为true -->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 设置日志文件大小，超过指定大小，就生成新的日志文件 -->
            <maxFileSize>${maxSize}</maxFileSize>
        </triggeringPolicy>
        <!-- 过滤器，只记录warn级别的日志 -->
        <!-- 如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${log_dir}/warn/%d{yyyy-MM-dd}/warn-log.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalMaxSize}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- info级别日志 appender -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- true日志会被追加到文件结尾，false清空原文件，默认为true -->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 设置日志文件大小，超过指定大小，就生成新的日志文件 -->
            <maxFileSize>${maxSize}</maxFileSize>
        </triggeringPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_dir}/info/%d{yyyy-MM-dd}/info-log.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalMaxSize}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- debug级别日志 appender -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- true日志会被追加到文件结尾，false清空原文件，默认为true -->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 设置日志文件大小，超过指定大小，就生成新的日志文件 -->
            <maxFileSize>${maxSize}</maxFileSize>
        </triggeringPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/debug-log.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalMaxSize}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- trace级别日志 appender -->
    <appender name="trace" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- true日志会被追加到文件结尾，false清空原文件，默认为true -->
        <append>true</append>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 设置日志文件大小，超过指定大小，就生成新的日志文件 -->
            <maxFileSize>${maxSize}</maxFileSize>
        </triggeringPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_dir}/trace/%d{yyyy-MM-dd}/trace-log.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalMaxSize}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 设置日志输出格式 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
    在logback中，logger和root logger都是日志记录器（logger）的实例，用于控制日志的输出级别。它们之间的区别在于它们的作用范围和默认配置：

    logger是应用程序中的具体组件或类的日志记录器。每个logger都可以单独配置，以控制特定组件或类的日志输出级别。通过logger，我们可以对不同的组件或类设置不同的日志级别，从而灵活地控制日志的输出。

    root是logger的顶级父级别。它是logger层次结构的根节点，用于控制整个应用程序的日志输出级别。
    root用于设置默认的全局日志级别，适用于所有未被特定 logger 元素覆盖的包或类。
    如果没有为特定的logger配置日志级别，那么它将继承root logger的日志级别。
    -->

    <!--    <logger name="java.sql.Connection" level="DEBUG"/>-->
    <!--    <logger name="java.sql.Statement" level="DEBUG"/>-->
    <!--    <logger name="java.sql.PreparedStatement" level="DEBUG"/>-->

    <!--    <logger name="com.hc.wego" additivity="false" level="debug">-->
    <!--        &lt;!&ndash; 文件输出 &ndash;&gt;-->
    <!--        <appender-ref ref="error"/>-->
    <!--        <appender-ref ref="warn"/>-->
    <!--        <appender-ref ref="info"/>-->
    <!--        <appender-ref ref="debug"/>-->
    <!--        <appender-ref ref="trace"/>-->
    <!--        <appender-ref ref="console"/>-->
    <!--    </logger>-->

    <!--root配置必须在appender下边-->
    <!--root节点是对所有appender的管理,添加哪个appender就会打印哪个appender的日志-->
    <!--root节点的level是总的日志级别控制,如果appender的日志级别设定比root的高,会按照appender的日志级别打印日志,-->
    <!--如果appender的日志级别比root的低,会按照root设定的日志级别进行打印日志-->
    <!--也就是说root设定的日志级别是最低限制,如果root设定级别为最高ERROR,那么所有appender只能打印最高级别的日志-->
    <!--    <root level="error">-->
    <!--        &lt;!&ndash; 在控制台输出大量的日志信息&ndash;&gt;-->
    <!--        &lt;!&ndash; <appender-ref ref="console"/>&ndash;&gt;-->
    <!--        <appender-ref ref="error"/>-->
    <!--    </root>-->

    <root level="DEBUG">
        <appender-ref ref="error"/>
        <appender-ref ref="warn"/>
        <appender-ref ref="info"/>
        <appender-ref ref="debug"/>
        <appender-ref ref="trace"/>
        <appender-ref ref="console"/>
    </root>

</configuration>